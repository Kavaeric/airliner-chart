/* AirlinerChart.module.css */

/* ===== CHART LAYOUT & CONTAINER ===== */

.chartControls {
}

/* ChartContainer Component
 * 
 * A container for the chart, which handles the layout of the chart and its components.
 * 3x3 grid layout for chart components:
 * ┌─────────────┬─────────────┬─────────────┐
 * │ Y Brush     │ Y Axis      │ Chart Area  │
 * ├─────────────┼─────────────┼─────────────┤
 * │ empty       │ empty       │ X Axis      │
 * ├─────────────┼─────────────┼─────────────┤
 * │ empty       │ empty       │ X Brush     │
 * └─────────────┴─────────────┴─────────────┘
 */
.chartContainer {
	position: relative;
	display: grid;
	grid-template-areas:
		"yAxis chartArea"
		"empty1 xAxis";

	/* Explicit minmax values are needed to ensure the SVG chart can shrink
	   because SVG sure is weird like that */
	grid-template-rows:
		minmax(0, auto)
		minmax(0, var(--space-600));
	grid-template-columns:
		minmax(0, var(--space-600))
		minmax(0, auto);
	width: 100%;
	height: 100%;
	min-height: 0; /* Allows flex child to shrink */
}

@media (pointer: fine) {
	.chartContainer {
		grid-template-areas:
			"yBrush yAxis chartArea"
			"empty1 empty1 xAxis"
			"empty1 empty1 xBrush";
		grid-template-rows:
			minmax(0, auto)
			minmax(0, var(--space-600))
			minmax(0, var(--interactive-min-size));
		grid-template-columns:
			minmax(0, var(--interactive-min-size))
			minmax(0, var(--space-600))
			minmax(0, auto);
	}
}

.chartArea {
	position: relative; /* For proper layering */
	background-color: var(--surface-major);
	z-index: 1; /* Ensure chart appears above axis labels */
	grid-area: chartArea;
	width: 100%;
	height: 100%;
	min-height: 0; /* Critical: allows grid item to shrink */
	overflow: hidden; /* Prevent content from expanding beyond bounds */
	touch-action: none; /* Prevent browser gestures for proper pinch zoom */

	/* === Browser Interaction Feedback Suppression === */
	/* Suppress Chrome desktop white outline on focus */
	outline: none;

	/* Suppress Chrome mobile blue tap highlight */
	-webkit-tap-highlight-color: transparent;

	/* Prevent text selection during interactions */
	user-select: none;
	-webkit-user-select: none; /* Safari/Chrome */
	-moz-user-select: none; /* Firefox */
	-ms-user-select: none; /* IE/Edge */

	/* Suppress any default browser styling */
	-webkit-appearance: none;
	-moz-appearance: none;
	appearance: none;
}

.empty1 {
	grid-area: empty1;
	border-top: var(--border-weight-100) solid var(--border-minor);
	border-right: var(--border-weight-100) solid var(--border-minor);
}

.mobile-hidden {
	display: none;
}

@media (width >= 768px) {
	.mobile-hidden {
		display: inherit;
	}
}

/* ===== AXIS COMPONENTS ===== */

/* Y-axis grid area */
.yAxis {
	grid-area: yAxis;
	border-right: var(--border-weight-100) solid var(--border-minor);
}

/* X-axis grid area */
.xAxis {
	grid-area: xAxis;
	border-top: var(--border-weight-100) solid var(--border-minor);
}

/* Base axis styling */
.xAxis,
.yAxis {
	/* Nothing yet */
}

.axisLine {
	stroke-width: 0;
}

.axisLabelX,
.axisLabelY {
	font-family: var(--font-family-display);
	font-size: var(--text-size-350);
	font-weight: var(--font-weight-regular);
	text-transform: uppercase;
	letter-spacing: var(--text-tracking-800);
	fill: var(--text-minor);
}

.axisLabelX {
	dominant-baseline: baseline;
	transform: translateY(var(--space-negative-150));
}

.axisLabelY {
	dominant-baseline: hanging;
	writing-mode: sideways-lr;
	transform: translateX(var(--space-050));
}

.xAxis .tick line,
.yAxis .tick line {
	stroke-width: 0;
}

/* Axis tick number labels */
.xAxis .tick text,
.yAxis .tick text {
	font-family: var(--font-family-display);
	font-size: var(--text-size-200);
	font-weight: var(--font-weight-regular);
	letter-spacing: var(--text-tracking-400);
	fill: var(--text-minor);
}

.xAxis .tick text {
	text-anchor: middle;
	transform: translateY(var(--space-negative-050));
}

.yAxis .tick text {
	text-anchor: end;
	transform: translateX(var(--space-050));
}

/* ===== AXIS BRUSH CONTROLS ===== */

.xAxisBrush {
	grid-area: xBrush;
}

.yAxisBrush {
	grid-area: yBrush;
}

.xAxisBrush,
.yAxisBrush {
	display: none;
}

@media (pointer: fine) {
	.xAxisBrush,
	.yAxisBrush {
		display: block;
	}
}

.xAxisBrush .airlinerBrushControl {
	cursor: ew-resize;
}

.yAxisBrush .airlinerBrushControl {
	cursor: ns-resize;
}

/* Background styling for brush areas */
.airlinerBrushBackground {
	opacity: 1;
	fill: transparent;
	transition: fill 0.1s linear;
}

/* Limit line styling for passenger capacity limits */
.airlinerBrushLimitLine {
	opacity: 1;
	stroke: var(--interactive-diminished);
	stroke-width: 1;
}

/* Passenger class range styling */
.airlinerBrushPaxClassRange {
	opacity: 1;
	fill: var(--interactive-diminished);
}

.airlinerBrushRangeKM {
	opacity: 1;
	stroke: var(--interactive-diminished);
	stroke-width: 1;
}

/* --- Brush Backgrounds --- */

.airlinerBrushControl .airlinerBrushBackground {
	fill: var(--surface-minor) !important;
}

.airlinerBrushControl:hover .airlinerBrushBackground {
	fill: var(--surface-diminished) !important;
}

/* --- Brush Borders --- */
.xAxisBrush .brushBorder,
.yAxisBrush .brushBorder {
	fill: var(--border-minor);
}

.xAxisBrush .brushBorder {
	height: var(--border-weight-100);
	transition:
		height 0.1s linear,
		opacity 0.1s linear;
}

.yAxisBrush .brushBorder {
	width: var(--border-weight-100);
	transform: translateX(
		var(--space-negative-025)
	); /* SVG positioning works in mysterious ways */
	transition:
		width 0.1s linear,
		transform 0.1s linear,
		opacity 0.1s linear;
}

.xAxisBrush:hover .brushBorder {
	height: var(--space-100);
}

.yAxisBrush:hover .brushBorder {
	width: var(--space-100);
	transform: translateX(var(--space-negative-100));
}

.airlinerBrushControl .brushBorder {
	opacity: var(--opacity-100);
	fill: var(--interactive-augmented);
}

.airlinerBrushControl:hover .brushBorder {
	opacity: var(--opacity-100);
	fill: var(--interactive-augmented-active);
}

/* --- Limit Lines --- */
.airlinerBrushControl .airlinerBrushLimitLine {
	opacity: var(--opacity-100);
	stroke: var(--interactive-augmented);
	stroke-width: var(--border-weight-100);
}

/* --- Passenger Class Range --- */
.airlinerBrushControl .airlinerBrushPaxClassRange {
	opacity: var(--opacity-50);
	fill: var(--interactive-augmented);
}

.airlinerBrushControl:hover .airlinerBrushPaxClassRange {
	fill: var(--interactive-augmented-active);
}

.airlinerBrushControl .selectedAirlinerXHighlight {
	opacity: var(--opacity-100);
	fill: var(--interactive-major);
}

/* --- Range Line --- */
.airlinerBrushControl .airlinerBrushRangeKM {
	opacity: var(--opacity-100);
	stroke: var(--interactive-augmented);
	stroke-width: var(--border-weight-100);
}

.airlinerBrushControl:hover .airlinerBrushRangeKM {
	stroke: var(--interactive-augmented-active);
}

.airlinerBrushControl .selectedAirlinerYHighlight {
	opacity: var(--opacity-100);
	stroke: var(--interactive-major);
	stroke-width: 2;
}

.xAxisBrush .selectedAirlinerXHighlight {
	fill: var(--interactive-minor);
	animation: flash-twice 0.5s ease-in-out;
}

.yAxisBrush .selectedAirlinerYHighlight {
	animation: flash-twice 0.5s ease-in-out;
}

/**
 * Fade-in animation for selected airliner highlight on X axis.
 * Used for visual emphasis when selection changes.
 */
@keyframes airliner-fade-in {
	0% {
		opacity: 0;
	}

	100% {
		opacity: var(--opacity-100);
	}
}

/* ===== GRID & REFERENCE LINES ===== */

/* Grid styling */
.gridLine line {
	stroke: var(--border-diminished);
	stroke-width: var(--border-weight-100);
	shape-rendering: geometricprecision;
}

.gridIntersectionDot {
	pointer-events: none;
	fill: var(--border-diminished);
	shape-rendering: geometricprecision;
	opacity: var(--opacity-80);
}

/* Range reference lines */
.airlinerRangeReferenceLine {
	stroke: var(--border-diminished);
	stroke-width: var(--border-weight-100);
	stroke-dasharray: 8, 4, 4, 4;
}

.airlinerRangeReferenceLabel {
	font-family: var(--font-family-display);
	transform: translateX(var(--space-050));
	font-size: var(--text-size-400);
	font-weight: var(--font-weight-light);
	letter-spacing: var(--text-tracking-400);
	fill: var(--border-minor);
}

/* ===== SCATTER PLOT MARKERS ===== */

/* Diamond marker style */
.markerDiamond {
	pointer-events: none;
	opacity: 1;
	fill: var(--interactive-augmented);
	shape-rendering: geometricprecision;
	transition: all 0.1s ease-in-out;
}

.markerDiamond.hoveredAirliner {
	fill: var(--interactive-major);
	stroke: var(--interactive-augmented-hover);
}

.markerDiamond.selectedAirliner {
	fill: var(--surface-major);
	stroke: var(--interactive-major);
	stroke-width: 1;
}

/* Short line used as a marker */
.markerLine {
	opacity: var(--opacity-100);
	stroke: var(--border-minor);
	stroke-width: var(--border-weight-200);
	stroke-linecap: butt;
	shape-rendering: geometricprecision;
}

.markerLine.hoveredAirliner {
	stroke: var(--interactive-diminished);
}

.markerLine.selectedAirliner {
	stroke: var(--interactive-minor);
}

/* ===== CONNECTING LINES ===== */

/* Connecting line styling */
.markerConnectingLineMinor {
	opacity: var(--opacity-50);
	stroke: var(--surface-diminished);
	stroke-linecap: butt;
	shape-rendering: geometricprecision;
	transition: all 0.2s ease-in-out;
}

.markerConnectingLineMinor.selectedAirliner {
	stroke: var(--highlight-active-minor);
}

.markerConnectingLineMajor {
	cursor: pointer;
	fill: var(--interactive-augmented);
	stroke: var(--surface-depth-diminished);
	stroke-width: 1;
	shape-rendering: geometricprecision;
	transition: all 0.1s ease-in-out;
}

.markerConnectingLineMajor.hoveredAirliner {
	fill: var(--interactive-augmented-hover);
}

.markerConnectingLineMajor.selectedAirliner {
	fill: var(--interactive-major);
}

.markerLeader {
	stroke: var(--border-major);
	stroke-width: 1;
	stroke-linecap: butt;
	shape-rendering: geometricprecision;
	transition:
		stroke 0.1s ease-in-out,
		stroke-width 0.1s ease-in-out;
}

.markerLeader.hoveredAirliner {
	stroke: var(--interactive-diminished);
}

.markerLeader.selectedAirliner {
	stroke: var(--interactive-minor);
	stroke-width: 2;
}

/* ===== LABELS ===== */

/* Label styling */
.airlinerLabelInterrupt,
.airlinerLabel {
	font-family: var(--font-family-display);
	font-size: var(--text-size-350);
	font-weight: var(--font-weight-regular);
	letter-spacing: var(--text-tracking-800);
	cursor: pointer;
	transition: all 0.1s ease-in-out;
}

.airlinerLabel {
	fill: var(--text-minor);
}

.airlinerLabel.hoveredAirliner {
	font-weight: var(--font-weight-bold);
	fill: var(--text-major);
}

.airlinerLabel.selectedAirliner {
	font-weight: var(--font-weight-bold);
	fill: var(--text-major);
}

.airlinerLabelInterrupt {
	opacity: var(--opacity-30);
	fill: none;
	stroke: var(--surface-major);
	stroke-width: var(--space-200);
	stroke-linejoin: round;
	stroke-miterlimit: 1.5;
}

/* ===== CLUSTERS ===== */

.clusterBoundingBox {
	fill: var(--surface-depth-major);
	stroke: var(--border-diminished);
	stroke-width: 1;
	transition: all 0.05s linear;
	shape-rendering: geometricprecision;
}

.clusterBoundingBox.hoveredCluster {
	fill: var(--highlight-hover-minor);
	stroke: var(--border-major);
}

.clusterBoundingBox.selectedCluster {
	fill: var(--highlight-hover-minor);
	stroke: var(--border-major);
}

.clusterCentreMarker {
	fill: var(--border-diminished);
	transition: all 0.05s linear;
	shape-rendering: geometricprecision;
}

.clusterCentreMarker.hoveredCluster {
	fill: var(--border-major);
}

.clusterCentreMarker.selectedCluster {
	fill: var(--border-major);
}

.clusterMenu {
	transform: translate(-50%, -50%);
	pointer-events: auto;
	z-index: 1000;
	box-shadow: 0 0 0 var(--space-100)
		light-dark(
			rgba(255, 255, 255, var(--opacity-30)),
			rgba(0, 0, 0, var(--opacity-30))
		);
	animation: fade-in 0.1s ease-in-out;
}

.clusterMenu > div {
	background: var(--surface-minor);
}

.clusterMenu > div button.btn-diminished {
	padding: var(--space-100);
	font-size: var(--text-size-350);
	text-transform: none;
}

/* ===== GRID LINES FOR SELECTED AIRLINER ===== */

.airlinerGridLine {
	pointer-events: none;
	stroke-width: var(--border-weight-100);
	shape-rendering: geometricprecision;
}

/* Type-specific styles */
.airlinerGridLineVertical {
	/* Vertical line specific styles */
}

.airlinerGridLineHorizontal {
	/* Horizontal line specific styles */
}

.airlinerGridLineHovered {
	stroke: var(--highlight-hover-diminished);
}

.airlinerGridLineSelected {
	stroke: var(--highlight-active-diminished);
}

/* Highlight background rectangle for selected airliner */
.airlinerSelectionCapacityHighlight {
	opacity: 0.1;
	fill: var(--highlight-hover-diminished);
}

.airlinerGridLineLabel {
	font-family: var(--font-family-display);
	font-size: var(--text-size-400);
	font-weight: var(--font-weight-regular);
	letter-spacing: var(--text-tracking-400);
	fill: var(--highlight-active-minor);
	writing-mode: sideways-lr;
	text-anchor: end;
	transform: translateY(var(--space-negative-100))
		translateX(var(--space-negative-100));
}

/* ===== AXIS READOUTS ===== */

.yAxisReadout,
.xAxisReadout {
	transition: all 0.05s linear;
}

.yAxisReadoutLine,
.xAxisReadoutLine {
	stroke: var(--border-minor);
	stroke-width: var(--border-weight-100);
}

/* Hide axis readouts on touch devices for clarity */
@media (pointer: coarse) {
	.yAxisReadout,
	.yAxisReadoutLine,
	.xAxisReadout,
	.xAxisReadoutLine {
		transition: all 0.1s linear;
		opacity: 0;
	}
}

.yAxisReadout.hoveredAirliner,
.yAxisReadout.selectedAirliner,
.xAxisReadout.hoveredAirliner,
.xAxisReadout.selectedAirliner {
	opacity: 1;
}

.yAxisReadoutBox,
.xAxisReadoutBox {
	fill: var(--surface-minor);
	stroke: var(--border-minor);
	stroke-width: var(--border-weight-100);
	transition: all 0.1s linear;
}

.yAxisReadoutBox.hoveredAirliner,
.xAxisReadoutBox.hoveredAirliner {
	stroke: var(--border-major);
}

.yAxisReadoutBox.selectedAirliner,
.xAxisReadoutBox.selectedAirliner {
	fill: var(--interactive-major);
}

.yAxisReadoutText,
.xAxisReadoutText {
	font-family: var(--font-family-display);
	font-size: var(--text-size-300);
	font-weight: var(--font-weight-medium);
	text-transform: uppercase;
	letter-spacing: var(--text-tracking-800);
	fill: var(--text-minor);
	transition: all 0.1s linear;
}

.yAxisReadoutText {
	transform: translateX(var(--space-negative-050));
}

.yAxisReadoutText.hoveredAirliner,
.xAxisReadoutText.hoveredAirliner {
	fill: var(--text-major);
}

.yAxisReadoutText.selectedAirliner,
.xAxisReadoutText.selectedAirliner {
	font-weight: var(--font-weight-bold);
	fill: var(--interactive-major-inverse);
}

.xAxisReadout.hidden {
	opacity: 0;
}
